// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	flyte "github.com/adarga-ai/flyte-workflow-registration-operator/internal/flyte"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// RegisterWorkflow provides a mock function with given fields: ctx, tgzPath, meta, auth
func (_m *Client) RegisterWorkflow(ctx context.Context, tgzPath string, meta flyte.WorkflowMetadata, auth flyte.Auth) error {
	ret := _m.Called(ctx, tgzPath, meta, auth)

	if len(ret) == 0 {
		panic("no return value specified for RegisterWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, flyte.WorkflowMetadata, flyte.Auth) error); ok {
		r0 = rf(ctx, tgzPath, meta, auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_RegisterWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterWorkflow'
type Client_RegisterWorkflow_Call struct {
	*mock.Call
}

// RegisterWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - tgzPath string
//   - meta flyte.WorkflowMetadata
//   - auth flyte.Auth
func (_e *Client_Expecter) RegisterWorkflow(ctx interface{}, tgzPath interface{}, meta interface{}, auth interface{}) *Client_RegisterWorkflow_Call {
	return &Client_RegisterWorkflow_Call{Call: _e.mock.On("RegisterWorkflow", ctx, tgzPath, meta, auth)}
}

func (_c *Client_RegisterWorkflow_Call) Run(run func(ctx context.Context, tgzPath string, meta flyte.WorkflowMetadata, auth flyte.Auth)) *Client_RegisterWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(flyte.WorkflowMetadata), args[3].(flyte.Auth))
	})
	return _c
}

func (_c *Client_RegisterWorkflow_Call) Return(_a0 error) *Client_RegisterWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_RegisterWorkflow_Call) RunAndReturn(run func(context.Context, string, flyte.WorkflowMetadata, flyte.Auth) error) *Client_RegisterWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
