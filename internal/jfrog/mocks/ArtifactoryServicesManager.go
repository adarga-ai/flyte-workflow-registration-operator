// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	_go "github.com/jfrog/jfrog-client-go/artifactory/services/go"

	auth "github.com/jfrog/jfrog-client-go/auth"

	config "github.com/jfrog/jfrog-client-go/config"

	content "github.com/jfrog/jfrog-client-go/utils/io/content"

	entities "github.com/jfrog/build-info-go/entities"

	io "io"

	jfrog_client_goutils "github.com/jfrog/jfrog-client-go/utils"

	jfroghttpclient "github.com/jfrog/jfrog-client-go/http/jfroghttpclient"

	mock "github.com/stretchr/testify/mock"

	services "github.com/jfrog/jfrog-client-go/artifactory/services"

	utils "github.com/jfrog/jfrog-client-go/artifactory/services/utils"
)

// ArtifactoryServicesManager is an autogenerated mock type for the ArtifactoryServicesManager type
type ArtifactoryServicesManager struct {
	mock.Mock
}

type ArtifactoryServicesManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ArtifactoryServicesManager) EXPECT() *ArtifactoryServicesManager_Expecter {
	return &ArtifactoryServicesManager_Expecter{mock: &_m.Mock}
}

// ActivateKeyEncryption provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) ActivateKeyEncryption() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ActivateKeyEncryption")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_ActivateKeyEncryption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateKeyEncryption'
type ArtifactoryServicesManager_ActivateKeyEncryption_Call struct {
	*mock.Call
}

// ActivateKeyEncryption is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) ActivateKeyEncryption() *ArtifactoryServicesManager_ActivateKeyEncryption_Call {
	return &ArtifactoryServicesManager_ActivateKeyEncryption_Call{Call: _e.mock.On("ActivateKeyEncryption")}
}

func (_c *ArtifactoryServicesManager_ActivateKeyEncryption_Call) Run(run func()) *ArtifactoryServicesManager_ActivateKeyEncryption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_ActivateKeyEncryption_Call) Return(_a0 error) *ArtifactoryServicesManager_ActivateKeyEncryption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_ActivateKeyEncryption_Call) RunAndReturn(run func() error) *ArtifactoryServicesManager_ActivateKeyEncryption_Call {
	_c.Call.Return(run)
	return _c
}

// Aql provides a mock function with given fields: aql
func (_m *ArtifactoryServicesManager) Aql(aql string) (io.ReadCloser, error) {
	ret := _m.Called(aql)

	if len(ret) == 0 {
		panic("no return value specified for Aql")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(aql)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(aql)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(aql)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_Aql_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aql'
type ArtifactoryServicesManager_Aql_Call struct {
	*mock.Call
}

// Aql is a helper method to define mock.On call
//   - aql string
func (_e *ArtifactoryServicesManager_Expecter) Aql(aql interface{}) *ArtifactoryServicesManager_Aql_Call {
	return &ArtifactoryServicesManager_Aql_Call{Call: _e.mock.On("Aql", aql)}
}

func (_c *ArtifactoryServicesManager_Aql_Call) Run(run func(aql string)) *ArtifactoryServicesManager_Aql_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_Aql_Call) Return(_a0 io.ReadCloser, _a1 error) *ArtifactoryServicesManager_Aql_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_Aql_Call) RunAndReturn(run func(string) (io.ReadCloser, error)) *ArtifactoryServicesManager_Aql_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateStorageInfo provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) CalculateStorageInfo() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CalculateStorageInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CalculateStorageInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateStorageInfo'
type ArtifactoryServicesManager_CalculateStorageInfo_Call struct {
	*mock.Call
}

// CalculateStorageInfo is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) CalculateStorageInfo() *ArtifactoryServicesManager_CalculateStorageInfo_Call {
	return &ArtifactoryServicesManager_CalculateStorageInfo_Call{Call: _e.mock.On("CalculateStorageInfo")}
}

func (_c *ArtifactoryServicesManager_CalculateStorageInfo_Call) Run(run func()) *ArtifactoryServicesManager_CalculateStorageInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CalculateStorageInfo_Call) Return(_a0 error) *ArtifactoryServicesManager_CalculateStorageInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CalculateStorageInfo_Call) RunAndReturn(run func() error) *ArtifactoryServicesManager_CalculateStorageInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Client provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) Client() *jfroghttpclient.JfrogHttpClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *jfroghttpclient.JfrogHttpClient
	if rf, ok := ret.Get(0).(func() *jfroghttpclient.JfrogHttpClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jfroghttpclient.JfrogHttpClient)
		}
	}

	return r0
}

// ArtifactoryServicesManager_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type ArtifactoryServicesManager_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) Client() *ArtifactoryServicesManager_Client_Call {
	return &ArtifactoryServicesManager_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *ArtifactoryServicesManager_Client_Call) Run(run func()) *ArtifactoryServicesManager_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_Client_Call) Return(_a0 *jfroghttpclient.JfrogHttpClient) *ArtifactoryServicesManager_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_Client_Call) RunAndReturn(run func() *jfroghttpclient.JfrogHttpClient) *ArtifactoryServicesManager_Client_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertLocalToFederatedRepository provides a mock function with given fields: repoKey
func (_m *ArtifactoryServicesManager) ConvertLocalToFederatedRepository(repoKey string) error {
	ret := _m.Called(repoKey)

	if len(ret) == 0 {
		panic("no return value specified for ConvertLocalToFederatedRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repoKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertLocalToFederatedRepository'
type ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call struct {
	*mock.Call
}

// ConvertLocalToFederatedRepository is a helper method to define mock.On call
//   - repoKey string
func (_e *ArtifactoryServicesManager_Expecter) ConvertLocalToFederatedRepository(repoKey interface{}) *ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call {
	return &ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call{Call: _e.mock.On("ConvertLocalToFederatedRepository", repoKey)}
}

func (_c *ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call) Run(run func(repoKey string)) *ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call) Return(_a0 error) *ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call) RunAndReturn(run func(string) error) *ArtifactoryServicesManager_ConvertLocalToFederatedRepository_Call {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) Copy(params ...services.MoveCopyParams) (int, int, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(...services.MoveCopyParams) (int, int, error)); ok {
		return rf(params...)
	}
	if rf, ok := ret.Get(0).(func(...services.MoveCopyParams) int); ok {
		r0 = rf(params...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(...services.MoveCopyParams) int); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(...services.MoveCopyParams) error); ok {
		r2 = rf(params...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArtifactoryServicesManager_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type ArtifactoryServicesManager_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - params ...services.MoveCopyParams
func (_e *ArtifactoryServicesManager_Expecter) Copy(params ...interface{}) *ArtifactoryServicesManager_Copy_Call {
	return &ArtifactoryServicesManager_Copy_Call{Call: _e.mock.On("Copy",
		append([]interface{}{}, params...)...)}
}

func (_c *ArtifactoryServicesManager_Copy_Call) Run(run func(params ...services.MoveCopyParams)) *ArtifactoryServicesManager_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]services.MoveCopyParams, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(services.MoveCopyParams)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ArtifactoryServicesManager_Copy_Call) Return(successCount int, failedCount int, err error) *ArtifactoryServicesManager_Copy_Call {
	_c.Call.Return(successCount, failedCount, err)
	return _c
}

func (_c *ArtifactoryServicesManager_Copy_Call) RunAndReturn(run func(...services.MoveCopyParams) (int, int, error)) *ArtifactoryServicesManager_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAPIKey provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) CreateAPIKey() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type ArtifactoryServicesManager_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) CreateAPIKey() *ArtifactoryServicesManager_CreateAPIKey_Call {
	return &ArtifactoryServicesManager_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey")}
}

func (_c *ArtifactoryServicesManager_CreateAPIKey_Call) Run(run func()) *ArtifactoryServicesManager_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateAPIKey_Call) Return(_a0 string, _a1 error) *ArtifactoryServicesManager_CreateAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateAPIKey_Call) RunAndReturn(run func() (string, error)) *ArtifactoryServicesManager_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFederatedRepository provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) CreateFederatedRepository() *services.FederatedRepositoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateFederatedRepository")
	}

	var r0 *services.FederatedRepositoryService
	if rf, ok := ret.Get(0).(func() *services.FederatedRepositoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.FederatedRepositoryService)
		}
	}

	return r0
}

// ArtifactoryServicesManager_CreateFederatedRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFederatedRepository'
type ArtifactoryServicesManager_CreateFederatedRepository_Call struct {
	*mock.Call
}

// CreateFederatedRepository is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) CreateFederatedRepository() *ArtifactoryServicesManager_CreateFederatedRepository_Call {
	return &ArtifactoryServicesManager_CreateFederatedRepository_Call{Call: _e.mock.On("CreateFederatedRepository")}
}

func (_c *ArtifactoryServicesManager_CreateFederatedRepository_Call) Run(run func()) *ArtifactoryServicesManager_CreateFederatedRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateFederatedRepository_Call) Return(_a0 *services.FederatedRepositoryService) *ArtifactoryServicesManager_CreateFederatedRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateFederatedRepository_Call) RunAndReturn(run func() *services.FederatedRepositoryService) *ArtifactoryServicesManager_CreateFederatedRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFederatedRepositoryWithParams provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreateFederatedRepositoryWithParams(params services.FederatedRepositoryBaseParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateFederatedRepositoryWithParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.FederatedRepositoryBaseParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFederatedRepositoryWithParams'
type ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call struct {
	*mock.Call
}

// CreateFederatedRepositoryWithParams is a helper method to define mock.On call
//   - params services.FederatedRepositoryBaseParams
func (_e *ArtifactoryServicesManager_Expecter) CreateFederatedRepositoryWithParams(params interface{}) *ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call {
	return &ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call{Call: _e.mock.On("CreateFederatedRepositoryWithParams", params)}
}

func (_c *ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call) Run(run func(params services.FederatedRepositoryBaseParams)) *ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.FederatedRepositoryBaseParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call) Return(_a0 error) *ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call) RunAndReturn(run func(services.FederatedRepositoryBaseParams) error) *ArtifactoryServicesManager_CreateFederatedRepositoryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreateGroup(params services.GroupParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.GroupParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type ArtifactoryServicesManager_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - params services.GroupParams
func (_e *ArtifactoryServicesManager_Expecter) CreateGroup(params interface{}) *ArtifactoryServicesManager_CreateGroup_Call {
	return &ArtifactoryServicesManager_CreateGroup_Call{Call: _e.mock.On("CreateGroup", params)}
}

func (_c *ArtifactoryServicesManager_CreateGroup_Call) Run(run func(params services.GroupParams)) *ArtifactoryServicesManager_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.GroupParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateGroup_Call) Return(_a0 error) *ArtifactoryServicesManager_CreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateGroup_Call) RunAndReturn(run func(services.GroupParams) error) *ArtifactoryServicesManager_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLocalRepository provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) CreateLocalRepository() *services.LocalRepositoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateLocalRepository")
	}

	var r0 *services.LocalRepositoryService
	if rf, ok := ret.Get(0).(func() *services.LocalRepositoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.LocalRepositoryService)
		}
	}

	return r0
}

// ArtifactoryServicesManager_CreateLocalRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLocalRepository'
type ArtifactoryServicesManager_CreateLocalRepository_Call struct {
	*mock.Call
}

// CreateLocalRepository is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) CreateLocalRepository() *ArtifactoryServicesManager_CreateLocalRepository_Call {
	return &ArtifactoryServicesManager_CreateLocalRepository_Call{Call: _e.mock.On("CreateLocalRepository")}
}

func (_c *ArtifactoryServicesManager_CreateLocalRepository_Call) Run(run func()) *ArtifactoryServicesManager_CreateLocalRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateLocalRepository_Call) Return(_a0 *services.LocalRepositoryService) *ArtifactoryServicesManager_CreateLocalRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateLocalRepository_Call) RunAndReturn(run func() *services.LocalRepositoryService) *ArtifactoryServicesManager_CreateLocalRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLocalRepositoryWithParams provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreateLocalRepositoryWithParams(params services.LocalRepositoryBaseParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocalRepositoryWithParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.LocalRepositoryBaseParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLocalRepositoryWithParams'
type ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call struct {
	*mock.Call
}

// CreateLocalRepositoryWithParams is a helper method to define mock.On call
//   - params services.LocalRepositoryBaseParams
func (_e *ArtifactoryServicesManager_Expecter) CreateLocalRepositoryWithParams(params interface{}) *ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call {
	return &ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call{Call: _e.mock.On("CreateLocalRepositoryWithParams", params)}
}

func (_c *ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call) Run(run func(params services.LocalRepositoryBaseParams)) *ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.LocalRepositoryBaseParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call) Return(_a0 error) *ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call) RunAndReturn(run func(services.LocalRepositoryBaseParams) error) *ArtifactoryServicesManager_CreateLocalRepositoryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePermissionTarget provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreatePermissionTarget(params services.PermissionTargetParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermissionTarget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.PermissionTargetParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreatePermissionTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePermissionTarget'
type ArtifactoryServicesManager_CreatePermissionTarget_Call struct {
	*mock.Call
}

// CreatePermissionTarget is a helper method to define mock.On call
//   - params services.PermissionTargetParams
func (_e *ArtifactoryServicesManager_Expecter) CreatePermissionTarget(params interface{}) *ArtifactoryServicesManager_CreatePermissionTarget_Call {
	return &ArtifactoryServicesManager_CreatePermissionTarget_Call{Call: _e.mock.On("CreatePermissionTarget", params)}
}

func (_c *ArtifactoryServicesManager_CreatePermissionTarget_Call) Run(run func(params services.PermissionTargetParams)) *ArtifactoryServicesManager_CreatePermissionTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.PermissionTargetParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreatePermissionTarget_Call) Return(_a0 error) *ArtifactoryServicesManager_CreatePermissionTarget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreatePermissionTarget_Call) RunAndReturn(run func(services.PermissionTargetParams) error) *ArtifactoryServicesManager_CreatePermissionTarget_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRemoteRepository provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) CreateRemoteRepository() *services.RemoteRepositoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateRemoteRepository")
	}

	var r0 *services.RemoteRepositoryService
	if rf, ok := ret.Get(0).(func() *services.RemoteRepositoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.RemoteRepositoryService)
		}
	}

	return r0
}

// ArtifactoryServicesManager_CreateRemoteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRemoteRepository'
type ArtifactoryServicesManager_CreateRemoteRepository_Call struct {
	*mock.Call
}

// CreateRemoteRepository is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) CreateRemoteRepository() *ArtifactoryServicesManager_CreateRemoteRepository_Call {
	return &ArtifactoryServicesManager_CreateRemoteRepository_Call{Call: _e.mock.On("CreateRemoteRepository")}
}

func (_c *ArtifactoryServicesManager_CreateRemoteRepository_Call) Run(run func()) *ArtifactoryServicesManager_CreateRemoteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateRemoteRepository_Call) Return(_a0 *services.RemoteRepositoryService) *ArtifactoryServicesManager_CreateRemoteRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateRemoteRepository_Call) RunAndReturn(run func() *services.RemoteRepositoryService) *ArtifactoryServicesManager_CreateRemoteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRemoteRepositoryWithParams provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreateRemoteRepositoryWithParams(params services.RemoteRepositoryBaseParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateRemoteRepositoryWithParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.RemoteRepositoryBaseParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRemoteRepositoryWithParams'
type ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call struct {
	*mock.Call
}

// CreateRemoteRepositoryWithParams is a helper method to define mock.On call
//   - params services.RemoteRepositoryBaseParams
func (_e *ArtifactoryServicesManager_Expecter) CreateRemoteRepositoryWithParams(params interface{}) *ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call {
	return &ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call{Call: _e.mock.On("CreateRemoteRepositoryWithParams", params)}
}

func (_c *ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call) Run(run func(params services.RemoteRepositoryBaseParams)) *ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.RemoteRepositoryBaseParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call) Return(_a0 error) *ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call) RunAndReturn(run func(services.RemoteRepositoryBaseParams) error) *ArtifactoryServicesManager_CreateRemoteRepositoryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReplication provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreateReplication(params services.CreateReplicationParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.CreateReplicationParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreateReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReplication'
type ArtifactoryServicesManager_CreateReplication_Call struct {
	*mock.Call
}

// CreateReplication is a helper method to define mock.On call
//   - params services.CreateReplicationParams
func (_e *ArtifactoryServicesManager_Expecter) CreateReplication(params interface{}) *ArtifactoryServicesManager_CreateReplication_Call {
	return &ArtifactoryServicesManager_CreateReplication_Call{Call: _e.mock.On("CreateReplication", params)}
}

func (_c *ArtifactoryServicesManager_CreateReplication_Call) Run(run func(params services.CreateReplicationParams)) *ArtifactoryServicesManager_CreateReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.CreateReplicationParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateReplication_Call) Return(_a0 error) *ArtifactoryServicesManager_CreateReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateReplication_Call) RunAndReturn(run func(services.CreateReplicationParams) error) *ArtifactoryServicesManager_CreateReplication_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepositoryWithParams provides a mock function with given fields: params, repoName
func (_m *ArtifactoryServicesManager) CreateRepositoryWithParams(params interface{}, repoName string) error {
	ret := _m.Called(params, repoName)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepositoryWithParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string) error); ok {
		r0 = rf(params, repoName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreateRepositoryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepositoryWithParams'
type ArtifactoryServicesManager_CreateRepositoryWithParams_Call struct {
	*mock.Call
}

// CreateRepositoryWithParams is a helper method to define mock.On call
//   - params interface{}
//   - repoName string
func (_e *ArtifactoryServicesManager_Expecter) CreateRepositoryWithParams(params interface{}, repoName interface{}) *ArtifactoryServicesManager_CreateRepositoryWithParams_Call {
	return &ArtifactoryServicesManager_CreateRepositoryWithParams_Call{Call: _e.mock.On("CreateRepositoryWithParams", params, repoName)}
}

func (_c *ArtifactoryServicesManager_CreateRepositoryWithParams_Call) Run(run func(params interface{}, repoName string)) *ArtifactoryServicesManager_CreateRepositoryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateRepositoryWithParams_Call) Return(_a0 error) *ArtifactoryServicesManager_CreateRepositoryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateRepositoryWithParams_Call) RunAndReturn(run func(interface{}, string) error) *ArtifactoryServicesManager_CreateRepositoryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateToken provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreateToken(params services.CreateTokenParams) (auth.CreateTokenResponseData, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 auth.CreateTokenResponseData
	var r1 error
	if rf, ok := ret.Get(0).(func(services.CreateTokenParams) (auth.CreateTokenResponseData, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.CreateTokenParams) auth.CreateTokenResponseData); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(auth.CreateTokenResponseData)
	}

	if rf, ok := ret.Get(1).(func(services.CreateTokenParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type ArtifactoryServicesManager_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - params services.CreateTokenParams
func (_e *ArtifactoryServicesManager_Expecter) CreateToken(params interface{}) *ArtifactoryServicesManager_CreateToken_Call {
	return &ArtifactoryServicesManager_CreateToken_Call{Call: _e.mock.On("CreateToken", params)}
}

func (_c *ArtifactoryServicesManager_CreateToken_Call) Run(run func(params services.CreateTokenParams)) *ArtifactoryServicesManager_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.CreateTokenParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateToken_Call) Return(_a0 auth.CreateTokenResponseData, _a1 error) *ArtifactoryServicesManager_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateToken_Call) RunAndReturn(run func(services.CreateTokenParams) (auth.CreateTokenResponseData, error)) *ArtifactoryServicesManager_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreateUser(params services.UserParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.UserParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type ArtifactoryServicesManager_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - params services.UserParams
func (_e *ArtifactoryServicesManager_Expecter) CreateUser(params interface{}) *ArtifactoryServicesManager_CreateUser_Call {
	return &ArtifactoryServicesManager_CreateUser_Call{Call: _e.mock.On("CreateUser", params)}
}

func (_c *ArtifactoryServicesManager_CreateUser_Call) Run(run func(params services.UserParams)) *ArtifactoryServicesManager_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.UserParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateUser_Call) Return(_a0 error) *ArtifactoryServicesManager_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateUser_Call) RunAndReturn(run func(services.UserParams) error) *ArtifactoryServicesManager_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVirtualRepository provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) CreateVirtualRepository() *services.VirtualRepositoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateVirtualRepository")
	}

	var r0 *services.VirtualRepositoryService
	if rf, ok := ret.Get(0).(func() *services.VirtualRepositoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.VirtualRepositoryService)
		}
	}

	return r0
}

// ArtifactoryServicesManager_CreateVirtualRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtualRepository'
type ArtifactoryServicesManager_CreateVirtualRepository_Call struct {
	*mock.Call
}

// CreateVirtualRepository is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) CreateVirtualRepository() *ArtifactoryServicesManager_CreateVirtualRepository_Call {
	return &ArtifactoryServicesManager_CreateVirtualRepository_Call{Call: _e.mock.On("CreateVirtualRepository")}
}

func (_c *ArtifactoryServicesManager_CreateVirtualRepository_Call) Run(run func()) *ArtifactoryServicesManager_CreateVirtualRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateVirtualRepository_Call) Return(_a0 *services.VirtualRepositoryService) *ArtifactoryServicesManager_CreateVirtualRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateVirtualRepository_Call) RunAndReturn(run func() *services.VirtualRepositoryService) *ArtifactoryServicesManager_CreateVirtualRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVirtualRepositoryWithParams provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) CreateVirtualRepositoryWithParams(params services.VirtualRepositoryBaseParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateVirtualRepositoryWithParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.VirtualRepositoryBaseParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtualRepositoryWithParams'
type ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call struct {
	*mock.Call
}

// CreateVirtualRepositoryWithParams is a helper method to define mock.On call
//   - params services.VirtualRepositoryBaseParams
func (_e *ArtifactoryServicesManager_Expecter) CreateVirtualRepositoryWithParams(params interface{}) *ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call {
	return &ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call{Call: _e.mock.On("CreateVirtualRepositoryWithParams", params)}
}

func (_c *ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call) Run(run func(params services.VirtualRepositoryBaseParams)) *ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.VirtualRepositoryBaseParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call) Return(_a0 error) *ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call) RunAndReturn(run func(services.VirtualRepositoryBaseParams) error) *ArtifactoryServicesManager_CreateVirtualRepositoryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateKeyEncryption provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) DeactivateKeyEncryption() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeactivateKeyEncryption")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_DeactivateKeyEncryption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateKeyEncryption'
type ArtifactoryServicesManager_DeactivateKeyEncryption_Call struct {
	*mock.Call
}

// DeactivateKeyEncryption is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) DeactivateKeyEncryption() *ArtifactoryServicesManager_DeactivateKeyEncryption_Call {
	return &ArtifactoryServicesManager_DeactivateKeyEncryption_Call{Call: _e.mock.On("DeactivateKeyEncryption")}
}

func (_c *ArtifactoryServicesManager_DeactivateKeyEncryption_Call) Run(run func()) *ArtifactoryServicesManager_DeactivateKeyEncryption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DeactivateKeyEncryption_Call) Return(_a0 bool, _a1 error) *ArtifactoryServicesManager_DeactivateKeyEncryption_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_DeactivateKeyEncryption_Call) RunAndReturn(run func() (bool, error)) *ArtifactoryServicesManager_DeactivateKeyEncryption_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFiles provides a mock function with given fields: reader
func (_m *ArtifactoryServicesManager) DeleteFiles(reader *content.ContentReader) (int, error) {
	ret := _m.Called(reader)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFiles")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*content.ContentReader) (int, error)); ok {
		return rf(reader)
	}
	if rf, ok := ret.Get(0).(func(*content.ContentReader) int); ok {
		r0 = rf(reader)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*content.ContentReader) error); ok {
		r1 = rf(reader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_DeleteFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFiles'
type ArtifactoryServicesManager_DeleteFiles_Call struct {
	*mock.Call
}

// DeleteFiles is a helper method to define mock.On call
//   - reader *content.ContentReader
func (_e *ArtifactoryServicesManager_Expecter) DeleteFiles(reader interface{}) *ArtifactoryServicesManager_DeleteFiles_Call {
	return &ArtifactoryServicesManager_DeleteFiles_Call{Call: _e.mock.On("DeleteFiles", reader)}
}

func (_c *ArtifactoryServicesManager_DeleteFiles_Call) Run(run func(reader *content.ContentReader)) *ArtifactoryServicesManager_DeleteFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*content.ContentReader))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteFiles_Call) Return(_a0 int, _a1 error) *ArtifactoryServicesManager_DeleteFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteFiles_Call) RunAndReturn(run func(*content.ContentReader) (int, error)) *ArtifactoryServicesManager_DeleteFiles_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: name
func (_m *ArtifactoryServicesManager) DeleteGroup(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type ArtifactoryServicesManager_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - name string
func (_e *ArtifactoryServicesManager_Expecter) DeleteGroup(name interface{}) *ArtifactoryServicesManager_DeleteGroup_Call {
	return &ArtifactoryServicesManager_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", name)}
}

func (_c *ArtifactoryServicesManager_DeleteGroup_Call) Run(run func(name string)) *ArtifactoryServicesManager_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteGroup_Call) Return(_a0 error) *ArtifactoryServicesManager_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteGroup_Call) RunAndReturn(run func(string) error) *ArtifactoryServicesManager_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePermissionTarget provides a mock function with given fields: permissionTargetName
func (_m *ArtifactoryServicesManager) DeletePermissionTarget(permissionTargetName string) error {
	ret := _m.Called(permissionTargetName)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermissionTarget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(permissionTargetName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_DeletePermissionTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePermissionTarget'
type ArtifactoryServicesManager_DeletePermissionTarget_Call struct {
	*mock.Call
}

// DeletePermissionTarget is a helper method to define mock.On call
//   - permissionTargetName string
func (_e *ArtifactoryServicesManager_Expecter) DeletePermissionTarget(permissionTargetName interface{}) *ArtifactoryServicesManager_DeletePermissionTarget_Call {
	return &ArtifactoryServicesManager_DeletePermissionTarget_Call{Call: _e.mock.On("DeletePermissionTarget", permissionTargetName)}
}

func (_c *ArtifactoryServicesManager_DeletePermissionTarget_Call) Run(run func(permissionTargetName string)) *ArtifactoryServicesManager_DeletePermissionTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DeletePermissionTarget_Call) Return(_a0 error) *ArtifactoryServicesManager_DeletePermissionTarget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_DeletePermissionTarget_Call) RunAndReturn(run func(string) error) *ArtifactoryServicesManager_DeletePermissionTarget_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProps provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) DeleteProps(params services.PropsParams) (int, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProps")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(services.PropsParams) (int, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.PropsParams) int); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(services.PropsParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_DeleteProps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProps'
type ArtifactoryServicesManager_DeleteProps_Call struct {
	*mock.Call
}

// DeleteProps is a helper method to define mock.On call
//   - params services.PropsParams
func (_e *ArtifactoryServicesManager_Expecter) DeleteProps(params interface{}) *ArtifactoryServicesManager_DeleteProps_Call {
	return &ArtifactoryServicesManager_DeleteProps_Call{Call: _e.mock.On("DeleteProps", params)}
}

func (_c *ArtifactoryServicesManager_DeleteProps_Call) Run(run func(params services.PropsParams)) *ArtifactoryServicesManager_DeleteProps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.PropsParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteProps_Call) Return(_a0 int, _a1 error) *ArtifactoryServicesManager_DeleteProps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteProps_Call) RunAndReturn(run func(services.PropsParams) (int, error)) *ArtifactoryServicesManager_DeleteProps_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReplication provides a mock function with given fields: repoKey
func (_m *ArtifactoryServicesManager) DeleteReplication(repoKey string) error {
	ret := _m.Called(repoKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repoKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_DeleteReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplication'
type ArtifactoryServicesManager_DeleteReplication_Call struct {
	*mock.Call
}

// DeleteReplication is a helper method to define mock.On call
//   - repoKey string
func (_e *ArtifactoryServicesManager_Expecter) DeleteReplication(repoKey interface{}) *ArtifactoryServicesManager_DeleteReplication_Call {
	return &ArtifactoryServicesManager_DeleteReplication_Call{Call: _e.mock.On("DeleteReplication", repoKey)}
}

func (_c *ArtifactoryServicesManager_DeleteReplication_Call) Run(run func(repoKey string)) *ArtifactoryServicesManager_DeleteReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteReplication_Call) Return(_a0 error) *ArtifactoryServicesManager_DeleteReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteReplication_Call) RunAndReturn(run func(string) error) *ArtifactoryServicesManager_DeleteReplication_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRepository provides a mock function with given fields: repoKey
func (_m *ArtifactoryServicesManager) DeleteRepository(repoKey string) error {
	ret := _m.Called(repoKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repoKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_DeleteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRepository'
type ArtifactoryServicesManager_DeleteRepository_Call struct {
	*mock.Call
}

// DeleteRepository is a helper method to define mock.On call
//   - repoKey string
func (_e *ArtifactoryServicesManager_Expecter) DeleteRepository(repoKey interface{}) *ArtifactoryServicesManager_DeleteRepository_Call {
	return &ArtifactoryServicesManager_DeleteRepository_Call{Call: _e.mock.On("DeleteRepository", repoKey)}
}

func (_c *ArtifactoryServicesManager_DeleteRepository_Call) Run(run func(repoKey string)) *ArtifactoryServicesManager_DeleteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteRepository_Call) Return(_a0 error) *ArtifactoryServicesManager_DeleteRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteRepository_Call) RunAndReturn(run func(string) error) *ArtifactoryServicesManager_DeleteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: name
func (_m *ArtifactoryServicesManager) DeleteUser(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type ArtifactoryServicesManager_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - name string
func (_e *ArtifactoryServicesManager_Expecter) DeleteUser(name interface{}) *ArtifactoryServicesManager_DeleteUser_Call {
	return &ArtifactoryServicesManager_DeleteUser_Call{Call: _e.mock.On("DeleteUser", name)}
}

func (_c *ArtifactoryServicesManager_DeleteUser_Call) Run(run func(name string)) *ArtifactoryServicesManager_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteUser_Call) Return(_a0 error) *ArtifactoryServicesManager_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_DeleteUser_Call) RunAndReturn(run func(string) error) *ArtifactoryServicesManager_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DiscardBuilds provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) DiscardBuilds(params services.DiscardBuildsParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for DiscardBuilds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.DiscardBuildsParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_DiscardBuilds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscardBuilds'
type ArtifactoryServicesManager_DiscardBuilds_Call struct {
	*mock.Call
}

// DiscardBuilds is a helper method to define mock.On call
//   - params services.DiscardBuildsParams
func (_e *ArtifactoryServicesManager_Expecter) DiscardBuilds(params interface{}) *ArtifactoryServicesManager_DiscardBuilds_Call {
	return &ArtifactoryServicesManager_DiscardBuilds_Call{Call: _e.mock.On("DiscardBuilds", params)}
}

func (_c *ArtifactoryServicesManager_DiscardBuilds_Call) Run(run func(params services.DiscardBuildsParams)) *ArtifactoryServicesManager_DiscardBuilds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.DiscardBuildsParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DiscardBuilds_Call) Return(_a0 error) *ArtifactoryServicesManager_DiscardBuilds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_DiscardBuilds_Call) RunAndReturn(run func(services.DiscardBuildsParams) error) *ArtifactoryServicesManager_DiscardBuilds_Call {
	_c.Call.Return(run)
	return _c
}

// DistributeBuild provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) DistributeBuild(params services.BuildDistributionParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for DistributeBuild")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.BuildDistributionParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_DistributeBuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistributeBuild'
type ArtifactoryServicesManager_DistributeBuild_Call struct {
	*mock.Call
}

// DistributeBuild is a helper method to define mock.On call
//   - params services.BuildDistributionParams
func (_e *ArtifactoryServicesManager_Expecter) DistributeBuild(params interface{}) *ArtifactoryServicesManager_DistributeBuild_Call {
	return &ArtifactoryServicesManager_DistributeBuild_Call{Call: _e.mock.On("DistributeBuild", params)}
}

func (_c *ArtifactoryServicesManager_DistributeBuild_Call) Run(run func(params services.BuildDistributionParams)) *ArtifactoryServicesManager_DistributeBuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.BuildDistributionParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DistributeBuild_Call) Return(_a0 error) *ArtifactoryServicesManager_DistributeBuild_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_DistributeBuild_Call) RunAndReturn(run func(services.BuildDistributionParams) error) *ArtifactoryServicesManager_DistributeBuild_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFiles provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) DownloadFiles(params ...services.DownloadParams) (int, int, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFiles")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(...services.DownloadParams) (int, int, error)); ok {
		return rf(params...)
	}
	if rf, ok := ret.Get(0).(func(...services.DownloadParams) int); ok {
		r0 = rf(params...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(...services.DownloadParams) int); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(...services.DownloadParams) error); ok {
		r2 = rf(params...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArtifactoryServicesManager_DownloadFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFiles'
type ArtifactoryServicesManager_DownloadFiles_Call struct {
	*mock.Call
}

// DownloadFiles is a helper method to define mock.On call
//   - params ...services.DownloadParams
func (_e *ArtifactoryServicesManager_Expecter) DownloadFiles(params ...interface{}) *ArtifactoryServicesManager_DownloadFiles_Call {
	return &ArtifactoryServicesManager_DownloadFiles_Call{Call: _e.mock.On("DownloadFiles",
		append([]interface{}{}, params...)...)}
}

func (_c *ArtifactoryServicesManager_DownloadFiles_Call) Run(run func(params ...services.DownloadParams)) *ArtifactoryServicesManager_DownloadFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]services.DownloadParams, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(services.DownloadParams)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DownloadFiles_Call) Return(totalDownloaded int, totalFailed int, err error) *ArtifactoryServicesManager_DownloadFiles_Call {
	_c.Call.Return(totalDownloaded, totalFailed, err)
	return _c
}

func (_c *ArtifactoryServicesManager_DownloadFiles_Call) RunAndReturn(run func(...services.DownloadParams) (int, int, error)) *ArtifactoryServicesManager_DownloadFiles_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFilesWithSummary provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) DownloadFilesWithSummary(params ...services.DownloadParams) (*utils.OperationSummary, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFilesWithSummary")
	}

	var r0 *utils.OperationSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(...services.DownloadParams) (*utils.OperationSummary, error)); ok {
		return rf(params...)
	}
	if rf, ok := ret.Get(0).(func(...services.DownloadParams) *utils.OperationSummary); ok {
		r0 = rf(params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.OperationSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(...services.DownloadParams) error); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_DownloadFilesWithSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFilesWithSummary'
type ArtifactoryServicesManager_DownloadFilesWithSummary_Call struct {
	*mock.Call
}

// DownloadFilesWithSummary is a helper method to define mock.On call
//   - params ...services.DownloadParams
func (_e *ArtifactoryServicesManager_Expecter) DownloadFilesWithSummary(params ...interface{}) *ArtifactoryServicesManager_DownloadFilesWithSummary_Call {
	return &ArtifactoryServicesManager_DownloadFilesWithSummary_Call{Call: _e.mock.On("DownloadFilesWithSummary",
		append([]interface{}{}, params...)...)}
}

func (_c *ArtifactoryServicesManager_DownloadFilesWithSummary_Call) Run(run func(params ...services.DownloadParams)) *ArtifactoryServicesManager_DownloadFilesWithSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]services.DownloadParams, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(services.DownloadParams)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ArtifactoryServicesManager_DownloadFilesWithSummary_Call) Return(operationSummary *utils.OperationSummary, err error) *ArtifactoryServicesManager_DownloadFilesWithSummary_Call {
	_c.Call.Return(operationSummary, err)
	return _c
}

func (_c *ArtifactoryServicesManager_DownloadFilesWithSummary_Call) RunAndReturn(run func(...services.DownloadParams) (*utils.OperationSummary, error)) *ArtifactoryServicesManager_DownloadFilesWithSummary_Call {
	_c.Call.Return(run)
	return _c
}

// Export provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) Export(params services.ExportParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.ExportParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type ArtifactoryServicesManager_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - params services.ExportParams
func (_e *ArtifactoryServicesManager_Expecter) Export(params interface{}) *ArtifactoryServicesManager_Export_Call {
	return &ArtifactoryServicesManager_Export_Call{Call: _e.mock.On("Export", params)}
}

func (_c *ArtifactoryServicesManager_Export_Call) Run(run func(params services.ExportParams)) *ArtifactoryServicesManager_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.ExportParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_Export_Call) Return(_a0 error) *ArtifactoryServicesManager_Export_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_Export_Call) RunAndReturn(run func(services.ExportParams) error) *ArtifactoryServicesManager_Export_Call {
	_c.Call.Return(run)
	return _c
}

// FileList provides a mock function with given fields: relativePath, optionalParams
func (_m *ArtifactoryServicesManager) FileList(relativePath string, optionalParams utils.FileListParams) (*utils.FileListResponse, error) {
	ret := _m.Called(relativePath, optionalParams)

	if len(ret) == 0 {
		panic("no return value specified for FileList")
	}

	var r0 *utils.FileListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, utils.FileListParams) (*utils.FileListResponse, error)); ok {
		return rf(relativePath, optionalParams)
	}
	if rf, ok := ret.Get(0).(func(string, utils.FileListParams) *utils.FileListResponse); ok {
		r0 = rf(relativePath, optionalParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.FileListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, utils.FileListParams) error); ok {
		r1 = rf(relativePath, optionalParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_FileList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileList'
type ArtifactoryServicesManager_FileList_Call struct {
	*mock.Call
}

// FileList is a helper method to define mock.On call
//   - relativePath string
//   - optionalParams utils.FileListParams
func (_e *ArtifactoryServicesManager_Expecter) FileList(relativePath interface{}, optionalParams interface{}) *ArtifactoryServicesManager_FileList_Call {
	return &ArtifactoryServicesManager_FileList_Call{Call: _e.mock.On("FileList", relativePath, optionalParams)}
}

func (_c *ArtifactoryServicesManager_FileList_Call) Run(run func(relativePath string, optionalParams utils.FileListParams)) *ArtifactoryServicesManager_FileList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(utils.FileListParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_FileList_Call) Return(_a0 *utils.FileListResponse, _a1 error) *ArtifactoryServicesManager_FileList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_FileList_Call) RunAndReturn(run func(string, utils.FileListParams) (*utils.FileListResponse, error)) *ArtifactoryServicesManager_FileList_Call {
	_c.Call.Return(run)
	return _c
}

// FolderInfo provides a mock function with given fields: relativePath
func (_m *ArtifactoryServicesManager) FolderInfo(relativePath string) (*utils.FolderInfo, error) {
	ret := _m.Called(relativePath)

	if len(ret) == 0 {
		panic("no return value specified for FolderInfo")
	}

	var r0 *utils.FolderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*utils.FolderInfo, error)); ok {
		return rf(relativePath)
	}
	if rf, ok := ret.Get(0).(func(string) *utils.FolderInfo); ok {
		r0 = rf(relativePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.FolderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(relativePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_FolderInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FolderInfo'
type ArtifactoryServicesManager_FolderInfo_Call struct {
	*mock.Call
}

// FolderInfo is a helper method to define mock.On call
//   - relativePath string
func (_e *ArtifactoryServicesManager_Expecter) FolderInfo(relativePath interface{}) *ArtifactoryServicesManager_FolderInfo_Call {
	return &ArtifactoryServicesManager_FolderInfo_Call{Call: _e.mock.On("FolderInfo", relativePath)}
}

func (_c *ArtifactoryServicesManager_FolderInfo_Call) Run(run func(relativePath string)) *ArtifactoryServicesManager_FolderInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_FolderInfo_Call) Return(_a0 *utils.FolderInfo, _a1 error) *ArtifactoryServicesManager_FolderInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_FolderInfo_Call) RunAndReturn(run func(string) (*utils.FolderInfo, error)) *ArtifactoryServicesManager_FolderInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetAPIKey provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetAPIKey() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAPIKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIKey'
type ArtifactoryServicesManager_GetAPIKey_Call struct {
	*mock.Call
}

// GetAPIKey is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetAPIKey() *ArtifactoryServicesManager_GetAPIKey_Call {
	return &ArtifactoryServicesManager_GetAPIKey_Call{Call: _e.mock.On("GetAPIKey")}
}

func (_c *ArtifactoryServicesManager_GetAPIKey_Call) Run(run func()) *ArtifactoryServicesManager_GetAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetAPIKey_Call) Return(_a0 string, _a1 error) *ArtifactoryServicesManager_GetAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetAPIKey_Call) RunAndReturn(run func() (string, error)) *ArtifactoryServicesManager_GetAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroups provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetAllGroups() (*[]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroups")
	}

	var r0 *[]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetAllGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroups'
type ArtifactoryServicesManager_GetAllGroups_Call struct {
	*mock.Call
}

// GetAllGroups is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetAllGroups() *ArtifactoryServicesManager_GetAllGroups_Call {
	return &ArtifactoryServicesManager_GetAllGroups_Call{Call: _e.mock.On("GetAllGroups")}
}

func (_c *ArtifactoryServicesManager_GetAllGroups_Call) Run(run func()) *ArtifactoryServicesManager_GetAllGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetAllGroups_Call) Return(_a0 *[]string, _a1 error) *ArtifactoryServicesManager_GetAllGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetAllGroups_Call) RunAndReturn(run func() (*[]string, error)) *ArtifactoryServicesManager_GetAllGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllRepositories provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetAllRepositories() (*[]services.RepositoryDetails, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllRepositories")
	}

	var r0 *[]services.RepositoryDetails
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]services.RepositoryDetails, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]services.RepositoryDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]services.RepositoryDetails)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetAllRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRepositories'
type ArtifactoryServicesManager_GetAllRepositories_Call struct {
	*mock.Call
}

// GetAllRepositories is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetAllRepositories() *ArtifactoryServicesManager_GetAllRepositories_Call {
	return &ArtifactoryServicesManager_GetAllRepositories_Call{Call: _e.mock.On("GetAllRepositories")}
}

func (_c *ArtifactoryServicesManager_GetAllRepositories_Call) Run(run func()) *ArtifactoryServicesManager_GetAllRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetAllRepositories_Call) Return(_a0 *[]services.RepositoryDetails, _a1 error) *ArtifactoryServicesManager_GetAllRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetAllRepositories_Call) RunAndReturn(run func() (*[]services.RepositoryDetails, error)) *ArtifactoryServicesManager_GetAllRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllRepositoriesFiltered provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) GetAllRepositoriesFiltered(params services.RepositoriesFilterParams) (*[]services.RepositoryDetails, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRepositoriesFiltered")
	}

	var r0 *[]services.RepositoryDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(services.RepositoriesFilterParams) (*[]services.RepositoryDetails, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.RepositoriesFilterParams) *[]services.RepositoryDetails); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]services.RepositoryDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(services.RepositoriesFilterParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRepositoriesFiltered'
type ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call struct {
	*mock.Call
}

// GetAllRepositoriesFiltered is a helper method to define mock.On call
//   - params services.RepositoriesFilterParams
func (_e *ArtifactoryServicesManager_Expecter) GetAllRepositoriesFiltered(params interface{}) *ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call {
	return &ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call{Call: _e.mock.On("GetAllRepositoriesFiltered", params)}
}

func (_c *ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call) Run(run func(params services.RepositoriesFilterParams)) *ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.RepositoriesFilterParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call) Return(_a0 *[]services.RepositoryDetails, _a1 error) *ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call) RunAndReturn(run func(services.RepositoriesFilterParams) (*[]services.RepositoryDetails, error)) *ArtifactoryServicesManager_GetAllRepositoriesFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetAllUsers() ([]*services.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*services.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*services.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*services.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type ArtifactoryServicesManager_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetAllUsers() *ArtifactoryServicesManager_GetAllUsers_Call {
	return &ArtifactoryServicesManager_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *ArtifactoryServicesManager_GetAllUsers_Call) Run(run func()) *ArtifactoryServicesManager_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetAllUsers_Call) Return(_a0 []*services.User, _a1 error) *ArtifactoryServicesManager_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetAllUsers_Call) RunAndReturn(run func() ([]*services.User, error)) *ArtifactoryServicesManager_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetBuildInfo provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) GetBuildInfo(params services.BuildInfoParams) (*entities.PublishedBuildInfo, bool, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetBuildInfo")
	}

	var r0 *entities.PublishedBuildInfo
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(services.BuildInfoParams) (*entities.PublishedBuildInfo, bool, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.BuildInfoParams) *entities.PublishedBuildInfo); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PublishedBuildInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(services.BuildInfoParams) bool); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(services.BuildInfoParams) error); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArtifactoryServicesManager_GetBuildInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuildInfo'
type ArtifactoryServicesManager_GetBuildInfo_Call struct {
	*mock.Call
}

// GetBuildInfo is a helper method to define mock.On call
//   - params services.BuildInfoParams
func (_e *ArtifactoryServicesManager_Expecter) GetBuildInfo(params interface{}) *ArtifactoryServicesManager_GetBuildInfo_Call {
	return &ArtifactoryServicesManager_GetBuildInfo_Call{Call: _e.mock.On("GetBuildInfo", params)}
}

func (_c *ArtifactoryServicesManager_GetBuildInfo_Call) Run(run func(params services.BuildInfoParams)) *ArtifactoryServicesManager_GetBuildInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.BuildInfoParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetBuildInfo_Call) Return(_a0 *entities.PublishedBuildInfo, _a1 bool, _a2 error) *ArtifactoryServicesManager_GetBuildInfo_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ArtifactoryServicesManager_GetBuildInfo_Call) RunAndReturn(run func(services.BuildInfoParams) (*entities.PublishedBuildInfo, bool, error)) *ArtifactoryServicesManager_GetBuildInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetConfig() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Config)
		}
	}

	return r0
}

// ArtifactoryServicesManager_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type ArtifactoryServicesManager_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetConfig() *ArtifactoryServicesManager_GetConfig_Call {
	return &ArtifactoryServicesManager_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *ArtifactoryServicesManager_GetConfig_Call) Run(run func()) *ArtifactoryServicesManager_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetConfig_Call) Return(_a0 config.Config) *ArtifactoryServicesManager_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_GetConfig_Call) RunAndReturn(run func() config.Config) *ArtifactoryServicesManager_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigDescriptor provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetConfigDescriptor() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigDescriptor")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetConfigDescriptor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigDescriptor'
type ArtifactoryServicesManager_GetConfigDescriptor_Call struct {
	*mock.Call
}

// GetConfigDescriptor is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetConfigDescriptor() *ArtifactoryServicesManager_GetConfigDescriptor_Call {
	return &ArtifactoryServicesManager_GetConfigDescriptor_Call{Call: _e.mock.On("GetConfigDescriptor")}
}

func (_c *ArtifactoryServicesManager_GetConfigDescriptor_Call) Run(run func()) *ArtifactoryServicesManager_GetConfigDescriptor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetConfigDescriptor_Call) Return(_a0 string, _a1 error) *ArtifactoryServicesManager_GetConfigDescriptor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetConfigDescriptor_Call) RunAndReturn(run func() (string, error)) *ArtifactoryServicesManager_GetConfigDescriptor_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) GetGroup(params services.GroupParams) (*services.Group, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *services.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(services.GroupParams) (*services.Group, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.GroupParams) *services.Group); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(services.GroupParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type ArtifactoryServicesManager_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - params services.GroupParams
func (_e *ArtifactoryServicesManager_Expecter) GetGroup(params interface{}) *ArtifactoryServicesManager_GetGroup_Call {
	return &ArtifactoryServicesManager_GetGroup_Call{Call: _e.mock.On("GetGroup", params)}
}

func (_c *ArtifactoryServicesManager_GetGroup_Call) Run(run func(params services.GroupParams)) *ArtifactoryServicesManager_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.GroupParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetGroup_Call) Return(_a0 *services.Group, _a1 error) *ArtifactoryServicesManager_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetGroup_Call) RunAndReturn(run func(services.GroupParams) (*services.Group, error)) *ArtifactoryServicesManager_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemProps provides a mock function with given fields: relativePath
func (_m *ArtifactoryServicesManager) GetItemProps(relativePath string) (*utils.ItemProperties, error) {
	ret := _m.Called(relativePath)

	if len(ret) == 0 {
		panic("no return value specified for GetItemProps")
	}

	var r0 *utils.ItemProperties
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*utils.ItemProperties, error)); ok {
		return rf(relativePath)
	}
	if rf, ok := ret.Get(0).(func(string) *utils.ItemProperties); ok {
		r0 = rf(relativePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ItemProperties)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(relativePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetItemProps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemProps'
type ArtifactoryServicesManager_GetItemProps_Call struct {
	*mock.Call
}

// GetItemProps is a helper method to define mock.On call
//   - relativePath string
func (_e *ArtifactoryServicesManager_Expecter) GetItemProps(relativePath interface{}) *ArtifactoryServicesManager_GetItemProps_Call {
	return &ArtifactoryServicesManager_GetItemProps_Call{Call: _e.mock.On("GetItemProps", relativePath)}
}

func (_c *ArtifactoryServicesManager_GetItemProps_Call) Run(run func(relativePath string)) *ArtifactoryServicesManager_GetItemProps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetItemProps_Call) Return(_a0 *utils.ItemProperties, _a1 error) *ArtifactoryServicesManager_GetItemProps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetItemProps_Call) RunAndReturn(run func(string) (*utils.ItemProperties, error)) *ArtifactoryServicesManager_GetItemProps_Call {
	_c.Call.Return(run)
	return _c
}

// GetLockedUsers provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetLockedUsers() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLockedUsers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetLockedUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLockedUsers'
type ArtifactoryServicesManager_GetLockedUsers_Call struct {
	*mock.Call
}

// GetLockedUsers is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetLockedUsers() *ArtifactoryServicesManager_GetLockedUsers_Call {
	return &ArtifactoryServicesManager_GetLockedUsers_Call{Call: _e.mock.On("GetLockedUsers")}
}

func (_c *ArtifactoryServicesManager_GetLockedUsers_Call) Run(run func()) *ArtifactoryServicesManager_GetLockedUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetLockedUsers_Call) Return(_a0 []string, _a1 error) *ArtifactoryServicesManager_GetLockedUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetLockedUsers_Call) RunAndReturn(run func() ([]string, error)) *ArtifactoryServicesManager_GetLockedUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetPathsToDelete provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) GetPathsToDelete(params services.DeleteParams) (*content.ContentReader, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetPathsToDelete")
	}

	var r0 *content.ContentReader
	var r1 error
	if rf, ok := ret.Get(0).(func(services.DeleteParams) (*content.ContentReader, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.DeleteParams) *content.ContentReader); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.ContentReader)
		}
	}

	if rf, ok := ret.Get(1).(func(services.DeleteParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetPathsToDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPathsToDelete'
type ArtifactoryServicesManager_GetPathsToDelete_Call struct {
	*mock.Call
}

// GetPathsToDelete is a helper method to define mock.On call
//   - params services.DeleteParams
func (_e *ArtifactoryServicesManager_Expecter) GetPathsToDelete(params interface{}) *ArtifactoryServicesManager_GetPathsToDelete_Call {
	return &ArtifactoryServicesManager_GetPathsToDelete_Call{Call: _e.mock.On("GetPathsToDelete", params)}
}

func (_c *ArtifactoryServicesManager_GetPathsToDelete_Call) Run(run func(params services.DeleteParams)) *ArtifactoryServicesManager_GetPathsToDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.DeleteParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetPathsToDelete_Call) Return(_a0 *content.ContentReader, _a1 error) *ArtifactoryServicesManager_GetPathsToDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetPathsToDelete_Call) RunAndReturn(run func(services.DeleteParams) (*content.ContentReader, error)) *ArtifactoryServicesManager_GetPathsToDelete_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionTarget provides a mock function with given fields: permissionTargetName
func (_m *ArtifactoryServicesManager) GetPermissionTarget(permissionTargetName string) (*services.PermissionTargetParams, error) {
	ret := _m.Called(permissionTargetName)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionTarget")
	}

	var r0 *services.PermissionTargetParams
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*services.PermissionTargetParams, error)); ok {
		return rf(permissionTargetName)
	}
	if rf, ok := ret.Get(0).(func(string) *services.PermissionTargetParams); ok {
		r0 = rf(permissionTargetName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.PermissionTargetParams)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(permissionTargetName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetPermissionTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionTarget'
type ArtifactoryServicesManager_GetPermissionTarget_Call struct {
	*mock.Call
}

// GetPermissionTarget is a helper method to define mock.On call
//   - permissionTargetName string
func (_e *ArtifactoryServicesManager_Expecter) GetPermissionTarget(permissionTargetName interface{}) *ArtifactoryServicesManager_GetPermissionTarget_Call {
	return &ArtifactoryServicesManager_GetPermissionTarget_Call{Call: _e.mock.On("GetPermissionTarget", permissionTargetName)}
}

func (_c *ArtifactoryServicesManager_GetPermissionTarget_Call) Run(run func(permissionTargetName string)) *ArtifactoryServicesManager_GetPermissionTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetPermissionTarget_Call) Return(_a0 *services.PermissionTargetParams, _a1 error) *ArtifactoryServicesManager_GetPermissionTarget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetPermissionTarget_Call) RunAndReturn(run func(string) (*services.PermissionTargetParams, error)) *ArtifactoryServicesManager_GetPermissionTarget_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplication provides a mock function with given fields: repoKey
func (_m *ArtifactoryServicesManager) GetReplication(repoKey string) ([]utils.ReplicationParams, error) {
	ret := _m.Called(repoKey)

	if len(ret) == 0 {
		panic("no return value specified for GetReplication")
	}

	var r0 []utils.ReplicationParams
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]utils.ReplicationParams, error)); ok {
		return rf(repoKey)
	}
	if rf, ok := ret.Get(0).(func(string) []utils.ReplicationParams); ok {
		r0 = rf(repoKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.ReplicationParams)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplication'
type ArtifactoryServicesManager_GetReplication_Call struct {
	*mock.Call
}

// GetReplication is a helper method to define mock.On call
//   - repoKey string
func (_e *ArtifactoryServicesManager_Expecter) GetReplication(repoKey interface{}) *ArtifactoryServicesManager_GetReplication_Call {
	return &ArtifactoryServicesManager_GetReplication_Call{Call: _e.mock.On("GetReplication", repoKey)}
}

func (_c *ArtifactoryServicesManager_GetReplication_Call) Run(run func(repoKey string)) *ArtifactoryServicesManager_GetReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetReplication_Call) Return(_a0 []utils.ReplicationParams, _a1 error) *ArtifactoryServicesManager_GetReplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetReplication_Call) RunAndReturn(run func(string) ([]utils.ReplicationParams, error)) *ArtifactoryServicesManager_GetReplication_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function with given fields: repoKey, repoDetails
func (_m *ArtifactoryServicesManager) GetRepository(repoKey string, repoDetails interface{}) error {
	ret := _m.Called(repoKey, repoDetails)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(repoKey, repoDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type ArtifactoryServicesManager_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - repoKey string
//   - repoDetails interface{}
func (_e *ArtifactoryServicesManager_Expecter) GetRepository(repoKey interface{}, repoDetails interface{}) *ArtifactoryServicesManager_GetRepository_Call {
	return &ArtifactoryServicesManager_GetRepository_Call{Call: _e.mock.On("GetRepository", repoKey, repoDetails)}
}

func (_c *ArtifactoryServicesManager_GetRepository_Call) Run(run func(repoKey string, repoDetails interface{})) *ArtifactoryServicesManager_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetRepository_Call) Return(_a0 error) *ArtifactoryServicesManager_GetRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_GetRepository_Call) RunAndReturn(run func(string, interface{}) error) *ArtifactoryServicesManager_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetRunningNodes provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetRunningNodes() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRunningNodes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetRunningNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunningNodes'
type ArtifactoryServicesManager_GetRunningNodes_Call struct {
	*mock.Call
}

// GetRunningNodes is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetRunningNodes() *ArtifactoryServicesManager_GetRunningNodes_Call {
	return &ArtifactoryServicesManager_GetRunningNodes_Call{Call: _e.mock.On("GetRunningNodes")}
}

func (_c *ArtifactoryServicesManager_GetRunningNodes_Call) Run(run func()) *ArtifactoryServicesManager_GetRunningNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetRunningNodes_Call) Return(_a0 []string, _a1 error) *ArtifactoryServicesManager_GetRunningNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetRunningNodes_Call) RunAndReturn(run func() ([]string, error)) *ArtifactoryServicesManager_GetRunningNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceId provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetServiceId() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServiceId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetServiceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceId'
type ArtifactoryServicesManager_GetServiceId_Call struct {
	*mock.Call
}

// GetServiceId is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetServiceId() *ArtifactoryServicesManager_GetServiceId_Call {
	return &ArtifactoryServicesManager_GetServiceId_Call{Call: _e.mock.On("GetServiceId")}
}

func (_c *ArtifactoryServicesManager_GetServiceId_Call) Run(run func()) *ArtifactoryServicesManager_GetServiceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetServiceId_Call) Return(_a0 string, _a1 error) *ArtifactoryServicesManager_GetServiceId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetServiceId_Call) RunAndReturn(run func() (string, error)) *ArtifactoryServicesManager_GetServiceId_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageInfo provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetStorageInfo() (*utils.StorageInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStorageInfo")
	}

	var r0 *utils.StorageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*utils.StorageInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *utils.StorageInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.StorageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetStorageInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageInfo'
type ArtifactoryServicesManager_GetStorageInfo_Call struct {
	*mock.Call
}

// GetStorageInfo is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetStorageInfo() *ArtifactoryServicesManager_GetStorageInfo_Call {
	return &ArtifactoryServicesManager_GetStorageInfo_Call{Call: _e.mock.On("GetStorageInfo")}
}

func (_c *ArtifactoryServicesManager_GetStorageInfo_Call) Run(run func()) *ArtifactoryServicesManager_GetStorageInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetStorageInfo_Call) Return(_a0 *utils.StorageInfo, _a1 error) *ArtifactoryServicesManager_GetStorageInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetStorageInfo_Call) RunAndReturn(run func() (*utils.StorageInfo, error)) *ArtifactoryServicesManager_GetStorageInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokens provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetTokens() (services.GetTokensResponseData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTokens")
	}

	var r0 services.GetTokensResponseData
	var r1 error
	if rf, ok := ret.Get(0).(func() (services.GetTokensResponseData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() services.GetTokensResponseData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(services.GetTokensResponseData)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokens'
type ArtifactoryServicesManager_GetTokens_Call struct {
	*mock.Call
}

// GetTokens is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetTokens() *ArtifactoryServicesManager_GetTokens_Call {
	return &ArtifactoryServicesManager_GetTokens_Call{Call: _e.mock.On("GetTokens")}
}

func (_c *ArtifactoryServicesManager_GetTokens_Call) Run(run func()) *ArtifactoryServicesManager_GetTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetTokens_Call) Return(_a0 services.GetTokensResponseData, _a1 error) *ArtifactoryServicesManager_GetTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetTokens_Call) RunAndReturn(run func() (services.GetTokensResponseData, error)) *ArtifactoryServicesManager_GetTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnreferencedGitLfsFiles provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) GetUnreferencedGitLfsFiles(params services.GitLfsCleanParams) (*content.ContentReader, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetUnreferencedGitLfsFiles")
	}

	var r0 *content.ContentReader
	var r1 error
	if rf, ok := ret.Get(0).(func(services.GitLfsCleanParams) (*content.ContentReader, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.GitLfsCleanParams) *content.ContentReader); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.ContentReader)
		}
	}

	if rf, ok := ret.Get(1).(func(services.GitLfsCleanParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnreferencedGitLfsFiles'
type ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call struct {
	*mock.Call
}

// GetUnreferencedGitLfsFiles is a helper method to define mock.On call
//   - params services.GitLfsCleanParams
func (_e *ArtifactoryServicesManager_Expecter) GetUnreferencedGitLfsFiles(params interface{}) *ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call {
	return &ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call{Call: _e.mock.On("GetUnreferencedGitLfsFiles", params)}
}

func (_c *ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call) Run(run func(params services.GitLfsCleanParams)) *ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.GitLfsCleanParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call) Return(_a0 *content.ContentReader, _a1 error) *ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call) RunAndReturn(run func(services.GitLfsCleanParams) (*content.ContentReader, error)) *ArtifactoryServicesManager_GetUnreferencedGitLfsFiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) GetUser(params services.UserParams) (*services.User, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *services.User
	var r1 error
	if rf, ok := ret.Get(0).(func(services.UserParams) (*services.User, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.UserParams) *services.User); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.User)
		}
	}

	if rf, ok := ret.Get(1).(func(services.UserParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type ArtifactoryServicesManager_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - params services.UserParams
func (_e *ArtifactoryServicesManager_Expecter) GetUser(params interface{}) *ArtifactoryServicesManager_GetUser_Call {
	return &ArtifactoryServicesManager_GetUser_Call{Call: _e.mock.On("GetUser", params)}
}

func (_c *ArtifactoryServicesManager_GetUser_Call) Run(run func(params services.UserParams)) *ArtifactoryServicesManager_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.UserParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetUser_Call) Return(_a0 *services.User, _a1 error) *ArtifactoryServicesManager_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetUser_Call) RunAndReturn(run func(services.UserParams) (*services.User, error)) *ArtifactoryServicesManager_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTokens provides a mock function with given fields: username
func (_m *ArtifactoryServicesManager) GetUserTokens(username string) ([]string, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTokens")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetUserTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTokens'
type ArtifactoryServicesManager_GetUserTokens_Call struct {
	*mock.Call
}

// GetUserTokens is a helper method to define mock.On call
//   - username string
func (_e *ArtifactoryServicesManager_Expecter) GetUserTokens(username interface{}) *ArtifactoryServicesManager_GetUserTokens_Call {
	return &ArtifactoryServicesManager_GetUserTokens_Call{Call: _e.mock.On("GetUserTokens", username)}
}

func (_c *ArtifactoryServicesManager_GetUserTokens_Call) Run(run func(username string)) *ArtifactoryServicesManager_GetUserTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetUserTokens_Call) Return(_a0 []string, _a1 error) *ArtifactoryServicesManager_GetUserTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetUserTokens_Call) RunAndReturn(run func(string) ([]string, error)) *ArtifactoryServicesManager_GetUserTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) GetVersion() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type ArtifactoryServicesManager_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) GetVersion() *ArtifactoryServicesManager_GetVersion_Call {
	return &ArtifactoryServicesManager_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *ArtifactoryServicesManager_GetVersion_Call) Run(run func()) *ArtifactoryServicesManager_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_GetVersion_Call) Return(_a0 string, _a1 error) *ArtifactoryServicesManager_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_GetVersion_Call) RunAndReturn(run func() (string, error)) *ArtifactoryServicesManager_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// IsRepoExists provides a mock function with given fields: repoKey
func (_m *ArtifactoryServicesManager) IsRepoExists(repoKey string) (bool, error) {
	ret := _m.Called(repoKey)

	if len(ret) == 0 {
		panic("no return value specified for IsRepoExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(repoKey)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(repoKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_IsRepoExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRepoExists'
type ArtifactoryServicesManager_IsRepoExists_Call struct {
	*mock.Call
}

// IsRepoExists is a helper method to define mock.On call
//   - repoKey string
func (_e *ArtifactoryServicesManager_Expecter) IsRepoExists(repoKey interface{}) *ArtifactoryServicesManager_IsRepoExists_Call {
	return &ArtifactoryServicesManager_IsRepoExists_Call{Call: _e.mock.On("IsRepoExists", repoKey)}
}

func (_c *ArtifactoryServicesManager_IsRepoExists_Call) Run(run func(repoKey string)) *ArtifactoryServicesManager_IsRepoExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_IsRepoExists_Call) Return(_a0 bool, _a1 error) *ArtifactoryServicesManager_IsRepoExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_IsRepoExists_Call) RunAndReturn(run func(string) (bool, error)) *ArtifactoryServicesManager_IsRepoExists_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) Move(params ...services.MoveCopyParams) (int, int, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(...services.MoveCopyParams) (int, int, error)); ok {
		return rf(params...)
	}
	if rf, ok := ret.Get(0).(func(...services.MoveCopyParams) int); ok {
		r0 = rf(params...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(...services.MoveCopyParams) int); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(...services.MoveCopyParams) error); ok {
		r2 = rf(params...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArtifactoryServicesManager_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type ArtifactoryServicesManager_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - params ...services.MoveCopyParams
func (_e *ArtifactoryServicesManager_Expecter) Move(params ...interface{}) *ArtifactoryServicesManager_Move_Call {
	return &ArtifactoryServicesManager_Move_Call{Call: _e.mock.On("Move",
		append([]interface{}{}, params...)...)}
}

func (_c *ArtifactoryServicesManager_Move_Call) Run(run func(params ...services.MoveCopyParams)) *ArtifactoryServicesManager_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]services.MoveCopyParams, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(services.MoveCopyParams)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ArtifactoryServicesManager_Move_Call) Return(successCount int, failedCount int, err error) *ArtifactoryServicesManager_Move_Call {
	_c.Call.Return(successCount, failedCount, err)
	return _c
}

func (_c *ArtifactoryServicesManager_Move_Call) RunAndReturn(run func(...services.MoveCopyParams) (int, int, error)) *ArtifactoryServicesManager_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) Ping() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type ArtifactoryServicesManager_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) Ping() *ArtifactoryServicesManager_Ping_Call {
	return &ArtifactoryServicesManager_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *ArtifactoryServicesManager_Ping_Call) Run(run func()) *ArtifactoryServicesManager_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_Ping_Call) Return(_a0 []byte, _a1 error) *ArtifactoryServicesManager_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_Ping_Call) RunAndReturn(run func() ([]byte, error)) *ArtifactoryServicesManager_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PromoteBuild provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) PromoteBuild(params services.PromotionParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for PromoteBuild")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.PromotionParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_PromoteBuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoteBuild'
type ArtifactoryServicesManager_PromoteBuild_Call struct {
	*mock.Call
}

// PromoteBuild is a helper method to define mock.On call
//   - params services.PromotionParams
func (_e *ArtifactoryServicesManager_Expecter) PromoteBuild(params interface{}) *ArtifactoryServicesManager_PromoteBuild_Call {
	return &ArtifactoryServicesManager_PromoteBuild_Call{Call: _e.mock.On("PromoteBuild", params)}
}

func (_c *ArtifactoryServicesManager_PromoteBuild_Call) Run(run func(params services.PromotionParams)) *ArtifactoryServicesManager_PromoteBuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.PromotionParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_PromoteBuild_Call) Return(_a0 error) *ArtifactoryServicesManager_PromoteBuild_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_PromoteBuild_Call) RunAndReturn(run func(services.PromotionParams) error) *ArtifactoryServicesManager_PromoteBuild_Call {
	_c.Call.Return(run)
	return _c
}

// PromoteDocker provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) PromoteDocker(params services.DockerPromoteParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for PromoteDocker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.DockerPromoteParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_PromoteDocker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoteDocker'
type ArtifactoryServicesManager_PromoteDocker_Call struct {
	*mock.Call
}

// PromoteDocker is a helper method to define mock.On call
//   - params services.DockerPromoteParams
func (_e *ArtifactoryServicesManager_Expecter) PromoteDocker(params interface{}) *ArtifactoryServicesManager_PromoteDocker_Call {
	return &ArtifactoryServicesManager_PromoteDocker_Call{Call: _e.mock.On("PromoteDocker", params)}
}

func (_c *ArtifactoryServicesManager_PromoteDocker_Call) Run(run func(params services.DockerPromoteParams)) *ArtifactoryServicesManager_PromoteDocker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.DockerPromoteParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_PromoteDocker_Call) Return(_a0 error) *ArtifactoryServicesManager_PromoteDocker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_PromoteDocker_Call) RunAndReturn(run func(services.DockerPromoteParams) error) *ArtifactoryServicesManager_PromoteDocker_Call {
	_c.Call.Return(run)
	return _c
}

// PublishBuildInfo provides a mock function with given fields: build, projectKey
func (_m *ArtifactoryServicesManager) PublishBuildInfo(build *entities.BuildInfo, projectKey string) (*jfrog_client_goutils.Sha256Summary, error) {
	ret := _m.Called(build, projectKey)

	if len(ret) == 0 {
		panic("no return value specified for PublishBuildInfo")
	}

	var r0 *jfrog_client_goutils.Sha256Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.BuildInfo, string) (*jfrog_client_goutils.Sha256Summary, error)); ok {
		return rf(build, projectKey)
	}
	if rf, ok := ret.Get(0).(func(*entities.BuildInfo, string) *jfrog_client_goutils.Sha256Summary); ok {
		r0 = rf(build, projectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jfrog_client_goutils.Sha256Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.BuildInfo, string) error); ok {
		r1 = rf(build, projectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_PublishBuildInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishBuildInfo'
type ArtifactoryServicesManager_PublishBuildInfo_Call struct {
	*mock.Call
}

// PublishBuildInfo is a helper method to define mock.On call
//   - build *entities.BuildInfo
//   - projectKey string
func (_e *ArtifactoryServicesManager_Expecter) PublishBuildInfo(build interface{}, projectKey interface{}) *ArtifactoryServicesManager_PublishBuildInfo_Call {
	return &ArtifactoryServicesManager_PublishBuildInfo_Call{Call: _e.mock.On("PublishBuildInfo", build, projectKey)}
}

func (_c *ArtifactoryServicesManager_PublishBuildInfo_Call) Run(run func(build *entities.BuildInfo, projectKey string)) *ArtifactoryServicesManager_PublishBuildInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.BuildInfo), args[1].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_PublishBuildInfo_Call) Return(_a0 *jfrog_client_goutils.Sha256Summary, _a1 error) *ArtifactoryServicesManager_PublishBuildInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_PublishBuildInfo_Call) RunAndReturn(run func(*entities.BuildInfo, string) (*jfrog_client_goutils.Sha256Summary, error)) *ArtifactoryServicesManager_PublishBuildInfo_Call {
	_c.Call.Return(run)
	return _c
}

// PublishGoProject provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) PublishGoProject(params _go.GoParams) (*utils.OperationSummary, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for PublishGoProject")
	}

	var r0 *utils.OperationSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(_go.GoParams) (*utils.OperationSummary, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(_go.GoParams) *utils.OperationSummary); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.OperationSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(_go.GoParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_PublishGoProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishGoProject'
type ArtifactoryServicesManager_PublishGoProject_Call struct {
	*mock.Call
}

// PublishGoProject is a helper method to define mock.On call
//   - params _go.GoParams
func (_e *ArtifactoryServicesManager_Expecter) PublishGoProject(params interface{}) *ArtifactoryServicesManager_PublishGoProject_Call {
	return &ArtifactoryServicesManager_PublishGoProject_Call{Call: _e.mock.On("PublishGoProject", params)}
}

func (_c *ArtifactoryServicesManager_PublishGoProject_Call) Run(run func(params _go.GoParams)) *ArtifactoryServicesManager_PublishGoProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(_go.GoParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_PublishGoProject_Call) Return(_a0 *utils.OperationSummary, _a1 error) *ArtifactoryServicesManager_PublishGoProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_PublishGoProject_Call) RunAndReturn(run func(_go.GoParams) (*utils.OperationSummary, error)) *ArtifactoryServicesManager_PublishGoProject_Call {
	_c.Call.Return(run)
	return _c
}

// ReadRemoteFile provides a mock function with given fields: readPath
func (_m *ArtifactoryServicesManager) ReadRemoteFile(readPath string) (io.ReadCloser, error) {
	ret := _m.Called(readPath)

	if len(ret) == 0 {
		panic("no return value specified for ReadRemoteFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(readPath)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(readPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(readPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_ReadRemoteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRemoteFile'
type ArtifactoryServicesManager_ReadRemoteFile_Call struct {
	*mock.Call
}

// ReadRemoteFile is a helper method to define mock.On call
//   - readPath string
func (_e *ArtifactoryServicesManager_Expecter) ReadRemoteFile(readPath interface{}) *ArtifactoryServicesManager_ReadRemoteFile_Call {
	return &ArtifactoryServicesManager_ReadRemoteFile_Call{Call: _e.mock.On("ReadRemoteFile", readPath)}
}

func (_c *ArtifactoryServicesManager_ReadRemoteFile_Call) Run(run func(readPath string)) *ArtifactoryServicesManager_ReadRemoteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_ReadRemoteFile_Call) Return(_a0 io.ReadCloser, _a1 error) *ArtifactoryServicesManager_ReadRemoteFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_ReadRemoteFile_Call) RunAndReturn(run func(string) (io.ReadCloser, error)) *ArtifactoryServicesManager_ReadRemoteFile_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) RefreshToken(params services.ArtifactoryRefreshTokenParams) (auth.CreateTokenResponseData, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 auth.CreateTokenResponseData
	var r1 error
	if rf, ok := ret.Get(0).(func(services.ArtifactoryRefreshTokenParams) (auth.CreateTokenResponseData, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.ArtifactoryRefreshTokenParams) auth.CreateTokenResponseData); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(auth.CreateTokenResponseData)
	}

	if rf, ok := ret.Get(1).(func(services.ArtifactoryRefreshTokenParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type ArtifactoryServicesManager_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - params services.ArtifactoryRefreshTokenParams
func (_e *ArtifactoryServicesManager_Expecter) RefreshToken(params interface{}) *ArtifactoryServicesManager_RefreshToken_Call {
	return &ArtifactoryServicesManager_RefreshToken_Call{Call: _e.mock.On("RefreshToken", params)}
}

func (_c *ArtifactoryServicesManager_RefreshToken_Call) Run(run func(params services.ArtifactoryRefreshTokenParams)) *ArtifactoryServicesManager_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.ArtifactoryRefreshTokenParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_RefreshToken_Call) Return(_a0 auth.CreateTokenResponseData, _a1 error) *ArtifactoryServicesManager_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_RefreshToken_Call) RunAndReturn(run func(services.ArtifactoryRefreshTokenParams) (auth.CreateTokenResponseData, error)) *ArtifactoryServicesManager_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateAPIKey provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) RegenerateAPIKey() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegenerateAPIKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_RegenerateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateAPIKey'
type ArtifactoryServicesManager_RegenerateAPIKey_Call struct {
	*mock.Call
}

// RegenerateAPIKey is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) RegenerateAPIKey() *ArtifactoryServicesManager_RegenerateAPIKey_Call {
	return &ArtifactoryServicesManager_RegenerateAPIKey_Call{Call: _e.mock.On("RegenerateAPIKey")}
}

func (_c *ArtifactoryServicesManager_RegenerateAPIKey_Call) Run(run func()) *ArtifactoryServicesManager_RegenerateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_RegenerateAPIKey_Call) Return(_a0 string, _a1 error) *ArtifactoryServicesManager_RegenerateAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_RegenerateAPIKey_Call) RunAndReturn(run func() (string, error)) *ArtifactoryServicesManager_RegenerateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) RevokeToken(params services.RevokeTokenParams) (string, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(services.RevokeTokenParams) (string, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.RevokeTokenParams) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(services.RevokeTokenParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type ArtifactoryServicesManager_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - params services.RevokeTokenParams
func (_e *ArtifactoryServicesManager_Expecter) RevokeToken(params interface{}) *ArtifactoryServicesManager_RevokeToken_Call {
	return &ArtifactoryServicesManager_RevokeToken_Call{Call: _e.mock.On("RevokeToken", params)}
}

func (_c *ArtifactoryServicesManager_RevokeToken_Call) Run(run func(params services.RevokeTokenParams)) *ArtifactoryServicesManager_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.RevokeTokenParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_RevokeToken_Call) Return(_a0 string, _a1 error) *ArtifactoryServicesManager_RevokeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_RevokeToken_Call) RunAndReturn(run func(services.RevokeTokenParams) (string, error)) *ArtifactoryServicesManager_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// SearchFiles provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) SearchFiles(params services.SearchParams) (*content.ContentReader, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for SearchFiles")
	}

	var r0 *content.ContentReader
	var r1 error
	if rf, ok := ret.Get(0).(func(services.SearchParams) (*content.ContentReader, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.SearchParams) *content.ContentReader); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.ContentReader)
		}
	}

	if rf, ok := ret.Get(1).(func(services.SearchParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_SearchFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchFiles'
type ArtifactoryServicesManager_SearchFiles_Call struct {
	*mock.Call
}

// SearchFiles is a helper method to define mock.On call
//   - params services.SearchParams
func (_e *ArtifactoryServicesManager_Expecter) SearchFiles(params interface{}) *ArtifactoryServicesManager_SearchFiles_Call {
	return &ArtifactoryServicesManager_SearchFiles_Call{Call: _e.mock.On("SearchFiles", params)}
}

func (_c *ArtifactoryServicesManager_SearchFiles_Call) Run(run func(params services.SearchParams)) *ArtifactoryServicesManager_SearchFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.SearchParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_SearchFiles_Call) Return(_a0 *content.ContentReader, _a1 error) *ArtifactoryServicesManager_SearchFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_SearchFiles_Call) RunAndReturn(run func(services.SearchParams) (*content.ContentReader, error)) *ArtifactoryServicesManager_SearchFiles_Call {
	_c.Call.Return(run)
	return _c
}

// SetProps provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) SetProps(params services.PropsParams) (int, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for SetProps")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(services.PropsParams) (int, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.PropsParams) int); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(services.PropsParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_SetProps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProps'
type ArtifactoryServicesManager_SetProps_Call struct {
	*mock.Call
}

// SetProps is a helper method to define mock.On call
//   - params services.PropsParams
func (_e *ArtifactoryServicesManager_Expecter) SetProps(params interface{}) *ArtifactoryServicesManager_SetProps_Call {
	return &ArtifactoryServicesManager_SetProps_Call{Call: _e.mock.On("SetProps", params)}
}

func (_c *ArtifactoryServicesManager_SetProps_Call) Run(run func(params services.PropsParams)) *ArtifactoryServicesManager_SetProps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.PropsParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_SetProps_Call) Return(_a0 int, _a1 error) *ArtifactoryServicesManager_SetProps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_SetProps_Call) RunAndReturn(run func(services.PropsParams) (int, error)) *ArtifactoryServicesManager_SetProps_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerFederatedRepositoryFullSyncAll provides a mock function with given fields: repoKey
func (_m *ArtifactoryServicesManager) TriggerFederatedRepositoryFullSyncAll(repoKey string) error {
	ret := _m.Called(repoKey)

	if len(ret) == 0 {
		panic("no return value specified for TriggerFederatedRepositoryFullSyncAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repoKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerFederatedRepositoryFullSyncAll'
type ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call struct {
	*mock.Call
}

// TriggerFederatedRepositoryFullSyncAll is a helper method to define mock.On call
//   - repoKey string
func (_e *ArtifactoryServicesManager_Expecter) TriggerFederatedRepositoryFullSyncAll(repoKey interface{}) *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call {
	return &ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call{Call: _e.mock.On("TriggerFederatedRepositoryFullSyncAll", repoKey)}
}

func (_c *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call) Run(run func(repoKey string)) *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call) Return(_a0 error) *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call) RunAndReturn(run func(string) error) *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncAll_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerFederatedRepositoryFullSyncMirror provides a mock function with given fields: repoKey, mirrorUrl
func (_m *ArtifactoryServicesManager) TriggerFederatedRepositoryFullSyncMirror(repoKey string, mirrorUrl string) error {
	ret := _m.Called(repoKey, mirrorUrl)

	if len(ret) == 0 {
		panic("no return value specified for TriggerFederatedRepositoryFullSyncMirror")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repoKey, mirrorUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerFederatedRepositoryFullSyncMirror'
type ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call struct {
	*mock.Call
}

// TriggerFederatedRepositoryFullSyncMirror is a helper method to define mock.On call
//   - repoKey string
//   - mirrorUrl string
func (_e *ArtifactoryServicesManager_Expecter) TriggerFederatedRepositoryFullSyncMirror(repoKey interface{}, mirrorUrl interface{}) *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call {
	return &ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call{Call: _e.mock.On("TriggerFederatedRepositoryFullSyncMirror", repoKey, mirrorUrl)}
}

func (_c *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call) Run(run func(repoKey string, mirrorUrl string)) *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call) Return(_a0 error) *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call) RunAndReturn(run func(string, string) error) *ArtifactoryServicesManager_TriggerFederatedRepositoryFullSyncMirror_Call {
	_c.Call.Return(run)
	return _c
}

// UnlockUser provides a mock function with given fields: name
func (_m *ArtifactoryServicesManager) UnlockUser(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for UnlockUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_UnlockUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlockUser'
type ArtifactoryServicesManager_UnlockUser_Call struct {
	*mock.Call
}

// UnlockUser is a helper method to define mock.On call
//   - name string
func (_e *ArtifactoryServicesManager_Expecter) UnlockUser(name interface{}) *ArtifactoryServicesManager_UnlockUser_Call {
	return &ArtifactoryServicesManager_UnlockUser_Call{Call: _e.mock.On("UnlockUser", name)}
}

func (_c *ArtifactoryServicesManager_UnlockUser_Call) Run(run func(name string)) *ArtifactoryServicesManager_UnlockUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UnlockUser_Call) Return(_a0 error) *ArtifactoryServicesManager_UnlockUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UnlockUser_Call) RunAndReturn(run func(string) error) *ArtifactoryServicesManager_UnlockUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFederatedRepository provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) UpdateFederatedRepository() *services.FederatedRepositoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateFederatedRepository")
	}

	var r0 *services.FederatedRepositoryService
	if rf, ok := ret.Get(0).(func() *services.FederatedRepositoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.FederatedRepositoryService)
		}
	}

	return r0
}

// ArtifactoryServicesManager_UpdateFederatedRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFederatedRepository'
type ArtifactoryServicesManager_UpdateFederatedRepository_Call struct {
	*mock.Call
}

// UpdateFederatedRepository is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) UpdateFederatedRepository() *ArtifactoryServicesManager_UpdateFederatedRepository_Call {
	return &ArtifactoryServicesManager_UpdateFederatedRepository_Call{Call: _e.mock.On("UpdateFederatedRepository")}
}

func (_c *ArtifactoryServicesManager_UpdateFederatedRepository_Call) Run(run func()) *ArtifactoryServicesManager_UpdateFederatedRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateFederatedRepository_Call) Return(_a0 *services.FederatedRepositoryService) *ArtifactoryServicesManager_UpdateFederatedRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateFederatedRepository_Call) RunAndReturn(run func() *services.FederatedRepositoryService) *ArtifactoryServicesManager_UpdateFederatedRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) UpdateGroup(params services.GroupParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.GroupParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type ArtifactoryServicesManager_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - params services.GroupParams
func (_e *ArtifactoryServicesManager_Expecter) UpdateGroup(params interface{}) *ArtifactoryServicesManager_UpdateGroup_Call {
	return &ArtifactoryServicesManager_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", params)}
}

func (_c *ArtifactoryServicesManager_UpdateGroup_Call) Run(run func(params services.GroupParams)) *ArtifactoryServicesManager_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.GroupParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateGroup_Call) Return(_a0 error) *ArtifactoryServicesManager_UpdateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateGroup_Call) RunAndReturn(run func(services.GroupParams) error) *ArtifactoryServicesManager_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLocalRepository provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) UpdateLocalRepository() *services.LocalRepositoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocalRepository")
	}

	var r0 *services.LocalRepositoryService
	if rf, ok := ret.Get(0).(func() *services.LocalRepositoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.LocalRepositoryService)
		}
	}

	return r0
}

// ArtifactoryServicesManager_UpdateLocalRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocalRepository'
type ArtifactoryServicesManager_UpdateLocalRepository_Call struct {
	*mock.Call
}

// UpdateLocalRepository is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) UpdateLocalRepository() *ArtifactoryServicesManager_UpdateLocalRepository_Call {
	return &ArtifactoryServicesManager_UpdateLocalRepository_Call{Call: _e.mock.On("UpdateLocalRepository")}
}

func (_c *ArtifactoryServicesManager_UpdateLocalRepository_Call) Run(run func()) *ArtifactoryServicesManager_UpdateLocalRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateLocalRepository_Call) Return(_a0 *services.LocalRepositoryService) *ArtifactoryServicesManager_UpdateLocalRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateLocalRepository_Call) RunAndReturn(run func() *services.LocalRepositoryService) *ArtifactoryServicesManager_UpdateLocalRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissionTarget provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) UpdatePermissionTarget(params services.PermissionTargetParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissionTarget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.PermissionTargetParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_UpdatePermissionTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissionTarget'
type ArtifactoryServicesManager_UpdatePermissionTarget_Call struct {
	*mock.Call
}

// UpdatePermissionTarget is a helper method to define mock.On call
//   - params services.PermissionTargetParams
func (_e *ArtifactoryServicesManager_Expecter) UpdatePermissionTarget(params interface{}) *ArtifactoryServicesManager_UpdatePermissionTarget_Call {
	return &ArtifactoryServicesManager_UpdatePermissionTarget_Call{Call: _e.mock.On("UpdatePermissionTarget", params)}
}

func (_c *ArtifactoryServicesManager_UpdatePermissionTarget_Call) Run(run func(params services.PermissionTargetParams)) *ArtifactoryServicesManager_UpdatePermissionTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.PermissionTargetParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdatePermissionTarget_Call) Return(_a0 error) *ArtifactoryServicesManager_UpdatePermissionTarget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdatePermissionTarget_Call) RunAndReturn(run func(services.PermissionTargetParams) error) *ArtifactoryServicesManager_UpdatePermissionTarget_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRemoteRepository provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) UpdateRemoteRepository() *services.RemoteRepositoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateRemoteRepository")
	}

	var r0 *services.RemoteRepositoryService
	if rf, ok := ret.Get(0).(func() *services.RemoteRepositoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.RemoteRepositoryService)
		}
	}

	return r0
}

// ArtifactoryServicesManager_UpdateRemoteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRemoteRepository'
type ArtifactoryServicesManager_UpdateRemoteRepository_Call struct {
	*mock.Call
}

// UpdateRemoteRepository is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) UpdateRemoteRepository() *ArtifactoryServicesManager_UpdateRemoteRepository_Call {
	return &ArtifactoryServicesManager_UpdateRemoteRepository_Call{Call: _e.mock.On("UpdateRemoteRepository")}
}

func (_c *ArtifactoryServicesManager_UpdateRemoteRepository_Call) Run(run func()) *ArtifactoryServicesManager_UpdateRemoteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateRemoteRepository_Call) Return(_a0 *services.RemoteRepositoryService) *ArtifactoryServicesManager_UpdateRemoteRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateRemoteRepository_Call) RunAndReturn(run func() *services.RemoteRepositoryService) *ArtifactoryServicesManager_UpdateRemoteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReplication provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) UpdateReplication(params services.UpdateReplicationParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.UpdateReplicationParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_UpdateReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReplication'
type ArtifactoryServicesManager_UpdateReplication_Call struct {
	*mock.Call
}

// UpdateReplication is a helper method to define mock.On call
//   - params services.UpdateReplicationParams
func (_e *ArtifactoryServicesManager_Expecter) UpdateReplication(params interface{}) *ArtifactoryServicesManager_UpdateReplication_Call {
	return &ArtifactoryServicesManager_UpdateReplication_Call{Call: _e.mock.On("UpdateReplication", params)}
}

func (_c *ArtifactoryServicesManager_UpdateReplication_Call) Run(run func(params services.UpdateReplicationParams)) *ArtifactoryServicesManager_UpdateReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.UpdateReplicationParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateReplication_Call) Return(_a0 error) *ArtifactoryServicesManager_UpdateReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateReplication_Call) RunAndReturn(run func(services.UpdateReplicationParams) error) *ArtifactoryServicesManager_UpdateReplication_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepositoryWithParams provides a mock function with given fields: params, repoName
func (_m *ArtifactoryServicesManager) UpdateRepositoryWithParams(params interface{}, repoName string) error {
	ret := _m.Called(params, repoName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepositoryWithParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string) error); ok {
		r0 = rf(params, repoName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_UpdateRepositoryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepositoryWithParams'
type ArtifactoryServicesManager_UpdateRepositoryWithParams_Call struct {
	*mock.Call
}

// UpdateRepositoryWithParams is a helper method to define mock.On call
//   - params interface{}
//   - repoName string
func (_e *ArtifactoryServicesManager_Expecter) UpdateRepositoryWithParams(params interface{}, repoName interface{}) *ArtifactoryServicesManager_UpdateRepositoryWithParams_Call {
	return &ArtifactoryServicesManager_UpdateRepositoryWithParams_Call{Call: _e.mock.On("UpdateRepositoryWithParams", params, repoName)}
}

func (_c *ArtifactoryServicesManager_UpdateRepositoryWithParams_Call) Run(run func(params interface{}, repoName string)) *ArtifactoryServicesManager_UpdateRepositoryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateRepositoryWithParams_Call) Return(_a0 error) *ArtifactoryServicesManager_UpdateRepositoryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateRepositoryWithParams_Call) RunAndReturn(run func(interface{}, string) error) *ArtifactoryServicesManager_UpdateRepositoryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) UpdateUser(params services.UserParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.UserParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactoryServicesManager_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type ArtifactoryServicesManager_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - params services.UserParams
func (_e *ArtifactoryServicesManager_Expecter) UpdateUser(params interface{}) *ArtifactoryServicesManager_UpdateUser_Call {
	return &ArtifactoryServicesManager_UpdateUser_Call{Call: _e.mock.On("UpdateUser", params)}
}

func (_c *ArtifactoryServicesManager_UpdateUser_Call) Run(run func(params services.UserParams)) *ArtifactoryServicesManager_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.UserParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateUser_Call) Return(_a0 error) *ArtifactoryServicesManager_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateUser_Call) RunAndReturn(run func(services.UserParams) error) *ArtifactoryServicesManager_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVirtualRepository provides a mock function with given fields:
func (_m *ArtifactoryServicesManager) UpdateVirtualRepository() *services.VirtualRepositoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateVirtualRepository")
	}

	var r0 *services.VirtualRepositoryService
	if rf, ok := ret.Get(0).(func() *services.VirtualRepositoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.VirtualRepositoryService)
		}
	}

	return r0
}

// ArtifactoryServicesManager_UpdateVirtualRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVirtualRepository'
type ArtifactoryServicesManager_UpdateVirtualRepository_Call struct {
	*mock.Call
}

// UpdateVirtualRepository is a helper method to define mock.On call
func (_e *ArtifactoryServicesManager_Expecter) UpdateVirtualRepository() *ArtifactoryServicesManager_UpdateVirtualRepository_Call {
	return &ArtifactoryServicesManager_UpdateVirtualRepository_Call{Call: _e.mock.On("UpdateVirtualRepository")}
}

func (_c *ArtifactoryServicesManager_UpdateVirtualRepository_Call) Run(run func()) *ArtifactoryServicesManager_UpdateVirtualRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateVirtualRepository_Call) Return(_a0 *services.VirtualRepositoryService) *ArtifactoryServicesManager_UpdateVirtualRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactoryServicesManager_UpdateVirtualRepository_Call) RunAndReturn(run func() *services.VirtualRepositoryService) *ArtifactoryServicesManager_UpdateVirtualRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFiles provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) UploadFiles(params ...services.UploadParams) (int, int, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadFiles")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(...services.UploadParams) (int, int, error)); ok {
		return rf(params...)
	}
	if rf, ok := ret.Get(0).(func(...services.UploadParams) int); ok {
		r0 = rf(params...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(...services.UploadParams) int); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(...services.UploadParams) error); ok {
		r2 = rf(params...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArtifactoryServicesManager_UploadFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFiles'
type ArtifactoryServicesManager_UploadFiles_Call struct {
	*mock.Call
}

// UploadFiles is a helper method to define mock.On call
//   - params ...services.UploadParams
func (_e *ArtifactoryServicesManager_Expecter) UploadFiles(params ...interface{}) *ArtifactoryServicesManager_UploadFiles_Call {
	return &ArtifactoryServicesManager_UploadFiles_Call{Call: _e.mock.On("UploadFiles",
		append([]interface{}{}, params...)...)}
}

func (_c *ArtifactoryServicesManager_UploadFiles_Call) Run(run func(params ...services.UploadParams)) *ArtifactoryServicesManager_UploadFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]services.UploadParams, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(services.UploadParams)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UploadFiles_Call) Return(totalUploaded int, totalFailed int, err error) *ArtifactoryServicesManager_UploadFiles_Call {
	_c.Call.Return(totalUploaded, totalFailed, err)
	return _c
}

func (_c *ArtifactoryServicesManager_UploadFiles_Call) RunAndReturn(run func(...services.UploadParams) (int, int, error)) *ArtifactoryServicesManager_UploadFiles_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFilesWithSummary provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) UploadFilesWithSummary(params ...services.UploadParams) (*utils.OperationSummary, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadFilesWithSummary")
	}

	var r0 *utils.OperationSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(...services.UploadParams) (*utils.OperationSummary, error)); ok {
		return rf(params...)
	}
	if rf, ok := ret.Get(0).(func(...services.UploadParams) *utils.OperationSummary); ok {
		r0 = rf(params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.OperationSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(...services.UploadParams) error); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_UploadFilesWithSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFilesWithSummary'
type ArtifactoryServicesManager_UploadFilesWithSummary_Call struct {
	*mock.Call
}

// UploadFilesWithSummary is a helper method to define mock.On call
//   - params ...services.UploadParams
func (_e *ArtifactoryServicesManager_Expecter) UploadFilesWithSummary(params ...interface{}) *ArtifactoryServicesManager_UploadFilesWithSummary_Call {
	return &ArtifactoryServicesManager_UploadFilesWithSummary_Call{Call: _e.mock.On("UploadFilesWithSummary",
		append([]interface{}{}, params...)...)}
}

func (_c *ArtifactoryServicesManager_UploadFilesWithSummary_Call) Run(run func(params ...services.UploadParams)) *ArtifactoryServicesManager_UploadFilesWithSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]services.UploadParams, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(services.UploadParams)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ArtifactoryServicesManager_UploadFilesWithSummary_Call) Return(operationSummary *utils.OperationSummary, err error) *ArtifactoryServicesManager_UploadFilesWithSummary_Call {
	_c.Call.Return(operationSummary, err)
	return _c
}

func (_c *ArtifactoryServicesManager_UploadFilesWithSummary_Call) RunAndReturn(run func(...services.UploadParams) (*utils.OperationSummary, error)) *ArtifactoryServicesManager_UploadFilesWithSummary_Call {
	_c.Call.Return(run)
	return _c
}

// XrayScanBuild provides a mock function with given fields: params
func (_m *ArtifactoryServicesManager) XrayScanBuild(params services.XrayScanParams) ([]byte, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for XrayScanBuild")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(services.XrayScanParams) ([]byte, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(services.XrayScanParams) []byte); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(services.XrayScanParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactoryServicesManager_XrayScanBuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XrayScanBuild'
type ArtifactoryServicesManager_XrayScanBuild_Call struct {
	*mock.Call
}

// XrayScanBuild is a helper method to define mock.On call
//   - params services.XrayScanParams
func (_e *ArtifactoryServicesManager_Expecter) XrayScanBuild(params interface{}) *ArtifactoryServicesManager_XrayScanBuild_Call {
	return &ArtifactoryServicesManager_XrayScanBuild_Call{Call: _e.mock.On("XrayScanBuild", params)}
}

func (_c *ArtifactoryServicesManager_XrayScanBuild_Call) Run(run func(params services.XrayScanParams)) *ArtifactoryServicesManager_XrayScanBuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.XrayScanParams))
	})
	return _c
}

func (_c *ArtifactoryServicesManager_XrayScanBuild_Call) Return(_a0 []byte, _a1 error) *ArtifactoryServicesManager_XrayScanBuild_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactoryServicesManager_XrayScanBuild_Call) RunAndReturn(run func(services.XrayScanParams) ([]byte, error)) *ArtifactoryServicesManager_XrayScanBuild_Call {
	_c.Call.Return(run)
	return _c
}

// NewArtifactoryServicesManager creates a new instance of ArtifactoryServicesManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtifactoryServicesManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtifactoryServicesManager {
	mock := &ArtifactoryServicesManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
